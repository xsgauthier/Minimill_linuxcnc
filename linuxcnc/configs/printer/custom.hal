# connect position commands from motion module to step generator
net Xpos-cmd joint.0.motor-pos-cmd => stepgen.0.position-cmd
net Ypos-cmd joint.1.motor-pos-cmd => stepgen.1.position-cmd
net Zpos-cmd joint.2.motor-pos-cmd => stepgen.2.position-cmd
net Apos-cmd joint.3.motor-pos-cmd => stepgen.3.position-cmd

# connect position feedback from step generators
# to motion module
net Xpos-fb stepgen.0.position-fb => joint.0.motor-pos-fb
net Ypos-fb stepgen.1.position-fb => joint.1.motor-pos-fb
net Zpos-fb stepgen.2.position-fb => joint.2.motor-pos-fb
net Apos-fb stepgen.3.position-fb => joint.3.motor-pos-fb

# connect enable signals for step generators
net Xen joint.0.amp-enable-out => stepgen.0.enable
net Yen joint.1.amp-enable-out => stepgen.1.enable
net Zen joint.2.amp-enable-out => stepgen.2.enable
net Aen joint.3.amp-enable-out => stepgen.3.enable

# connect signals to step pulse generator outputs
net Xstep <= stepgen.0.step
net Xdir  <= stepgen.0.dir
net Ystep <= stepgen.1.step
net Ydir  <= stepgen.1.dir
net Zstep <= stepgen.2.step
net Zdir  <= stepgen.2.dir
net Astep <= stepgen.3.step
net Adir  <= stepgen.3.dir

# set stepgen module scaling - get values from ini file
setp stepgen.0.position-scale [JOINT_0]SCALE
setp stepgen.1.position-scale [JOINT_1]SCALE
setp stepgen.2.position-scale [JOINT_2]SCALE
setp stepgen.3.position-scale [JOINT_3]SCALE

# set stepgen module accel limits - get values from ini file
setp stepgen.0.maxaccel [JOINT_0]STEPGEN_MAXACCEL
setp stepgen.1.maxaccel [JOINT_1]STEPGEN_MAXACCEL
setp stepgen.2.maxaccel [JOINT_2]STEPGEN_MAXACCEL
setp stepgen.3.maxaccel [JOINT_3]STEPGEN_MAXACCEL

# standard pinout config file for 3-axis steppers
# using a parport for I/O
#

# finally connect physical pins to the signals
net Xstep => parport.0.pin-02-out
net Xdir  => parport.0.pin-03-out
net Ystep => parport.0.pin-04-out
net Ydir  => parport.0.pin-05-out
net Zstep => parport.0.pin-06-out
net Zdir  => parport.0.pin-07-out
net Astep => parport.0.pin-08-out
net Adir  => parport.0.pin-09-out

# create a signal for the estop loopback
net estop-loop iocontrol.0.user-enable-out iocontrol.0.emc-enable-in

#
# NO TOOL CHANGE: create signals for tool loading loopback
#
net tool-prep-loop iocontrol.0.tool-prepare iocontrol.0.tool-prepared
net tool-change-loop iocontrol.0.tool-change iocontrol.0.tool-changed


#
# GUI TOOL CHANGE
#
#loadusr -W hal_manualtoolchange
#unlinkp iocontrol.0.tool-change
#unlinkp iocontrol.0.tool-changed
#net tool-change hal_manualtoolchange.change iocontrol.0.tool-change 
#net tool-changed hal_manualtoolchange.changed iocontrol.0.tool-changed
#net tool-prep-number hal_manualtoolchange.number iocontrol.0.tool-prep-number


# connect "spindle on" motion controller pin to a physical pin
net spindle-on spindle.0.on => parport.0.pin-14-out
setp parport.0.pin-14-out-invert 1

###
### You might use something like this to enable chopper drives when machine ON
### the Xen signal is defined in core_stepper.hal
###

net Xen => parport.0.pin-01-out

###
### If you want active low for this pin, invert it like this:
###

setp parport.0.pin-01-out-invert 1

###
### A sample home switch on the X axis (axis 0).  make a signal,
### link the incoming parport pin to the signal, then link the signal
### to LinuxCNC's axis 0 home switch input pin
###

net Xhome <= parport.0.pin-10-in
net Yhome <= parport.0.pin-11-in
net Zhome <= parport.0.pin-12-in
net Xhome => joint.0.home-sw-in
net Yhome => joint.1.home-sw-in
net Zhome => joint.2.home-sw-in

###
### Shared home switches all on one parallel port pin?
### that's ok, hook the same signal to all the axes, but be sure to
### set HOME_IS_SHARED and HOME_SEQUENCE in the ini file.
###

# net homeswitches <= parport.0.pin-10-in
# net homeswitches => joint.0.home-sw-in
# net homeswitches => joint.1.home-sw-in
# net homeswitches => joint.2.home-sw-in

###
### Sample separate limit switches on the X axis (axis 0)
###

# net X-neg-limit parport.0.pin-11-in => joint.0.neg-lim-sw-in
# net X-pos-limit parport.0.pin-12-in => joint.0.pos-lim-sw-in

net Xhome => joint.0.neg-lim-sw-in
net Xhome => joint.0.pos-lim-sw-in
net Yhome => joint.1.neg-lim-sw-in
net Yhome => joint.1.pos-lim-sw-in
net Zhome => joint.2.neg-lim-sw-in
net Zhome => joint.2.pos-lim-sw-in

###
### Just like the shared home switches example, you can wire together
### limit switches.  Beware if you hit one, LinuxCNC will stop but can't tell
### you which switch/axis has faulted.  Use caution when recovering from this.
###

# net Xlimits parport.0.pin-13-in => joint.0.neg-lim-sw-in joint.0.pos-lim-sw-in

